# -*- coding: utf-8 -*-
"""ClassNotes-29May_to_23June_23.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F3LSaSqSdbxnHF67pXa2wa-0AEap7Z0K
"""

for i in range(1,5):  # this loop will display one element at a time
  print(i)

[tgeeks for tgeeks in range(1,5)]  # 'List comprehension'  this code will allow you to collect output of loop in a list

[tgeeks for tgeeks in range(1,5)]

list(range(-5,-10,-1)) # start , stop , step size

set(tgeeks for tgeeks in range(1,5))

float(2)

"""functions categories : UDF (User Defind function ) , built-in functions (methods)"""

print('hello')  # call function named print , which is built-in function

# UDF , function definition (Passive)
def greet(name):
  return name+' Welcome to my website'

#  call function named greet
greet('Amit')

#  Again call function named greet
greet('Allen')

# we use def keyword , to defind UDF
def addition(a,b):
  return a+b

# call function named addition
addition(10,25)

addition(50,40)

# we use def keyword , to defind UDF
def addition(numbers):
  add = 0
  for i in numbers:
    add = add+i
  return add

print(addition([10,20,30,40,50]))
print(addition([1,2,3,4,5,6,7,8,9,10]))

addition([1,2,3,4,5,6,7,8,9,10])

# write a function in python , which can accept multiple numbers as input
# then check and display only even numbers in output
def sample(numbers):   # define function named sample , which can accept multiple int
  for i in numbers:    # this for loop , allows to split input into individual elements
    if i%2 ==0:        # check current element is even or odd
      print(i)

sample([70,71,72,45,64])

sample([50,45,46])

numbers = [10,20,30,40,51]
for i in numbers:    # this for loop , allows to split input into individual elements
    if i%2 ==0:        # check current element is even or odd
      print(i)

"""30-may-23 classnotes UDF"""

# Function definition , function with argument(s) (input) and with return ( output)
def addition(a,b):
  return a+b

x = addition(80,30)
print(x)

# Function definition , function with argument(s) (input) and without return ( output)
def add(a,b):
  print(a+b)

add(80,20)

# Function definition , function without argument(s) (input) and with return ( output)
def sample():
  return 'Hello'

y = sample()
print(y)

# Function definition , function without argument(s) (input) and without return ( output)
def demo():
  print('Hello')

z = demo()
print(z)

#  function can return only one value at a time , return is exit statement
def dynamic_addition(numbers):
  a = 0
  for num in numbers:
   a = a+num
   # print(a)
   # return a

dynamic_addition([10,20,30,40,90])

"""Assignment - 02 : https://docs.google.com/document/d/1xo6WWCBX5ZAsd1q8702DNOYT505GcodhIn3hL8Dq5bI/edit?usp=sharing"""

salary_details = [2000,7000,8000,5000]
def calculate_incentives(salary):
  for sal in salary:
    print(sal*1.05)

calculate_incentives(salary_details)

def test(salary):
   return salary * 1.05

salary_details = [2000,7000,8000,5000]

list(map(test,salary_details))

"""31-May-2023 classnotes"""

def evaluate(marks):
  if marks > 60:
    return 'Pass'

list(map(evaluate,[90,80,50,40,60]))

list(filter(evaluate,[90,80,50,40,60]))

"""https://colab.research.google.com/drive/1Y2ECAl01KKhKdn2D_q1JP3XwFMBRWlw2?usp=sharing"""

def evaluate(marks):
  if marks > 60:
    print('Pass')

list(map(evaluate,[10,20,30,40,90]))

a = [10,20,30,40,90]
list(filter(evaluate,a))

a = print('hello')

print(a)

def check(num):
  if num > 5:
    print(num)

number = [10,20,3,2,1]

list(filter(check,number))

list(map(check,number))

"""01-June-23 classnotes

## lambda expression

One of Pythons most useful (and for beginners, confusing) tools is the lambda expression. lambda expressions allow us to create "anonymous" functions. This basically means we can quickly make ad-hoc functions without needing to properly define a function using def.

Function objects returned by running lambda expressions work exactly the same as those created and assigned by defs. There is key difference that makes lambda useful in specialized roles:

**lambda's body is a single expression, not a block of statements.**

* The lambda's body is similar to what we would put in a def body's return statement. We simply type the result as an expression instead of explicitly returning it. Because it is limited to an expression, a lambda is less general that a def. We can only squeeze design, to limit program nesting. lambda is designed for coding simple functions, and def handles the larger tasks.
"""

my_nums = [1,2,3,4,5]

lambda n: n % 2 == 0

list(filter(lambda n: n % 2 == 0,my_nums))

list(map(lambda n: n % 2 == 0,my_nums))

my_nums = [1,2,3,4,5]
list(map(lambda n: print(n % 2 == 0),my_nums))

a = lambda n:n % 2 == 0  # Assign lambda to a variable , then call it

type(a)

a(24)

b = lambda x,y,z : x+y+z

b(30,50,30)

c = lambda x : x if x%2 ==0 else None

c(24)

print(c(25))

"""Assignment -03 https://colab.research.google.com/drive/1-i2kAtQyxktiCC6j1UP_PCwdgB9qZppR?usp=sharing

2-June-2023 classnotes
"""

def login(userid,password):
  if userid =='amit' and password=='test123$':
    print('login successful')
  else:
    print('login failed')

def transaction(type,amount):
  current_balance = 0
  if type == 'withdrawal':
    current_balance = current_balance - amount

login('amit','test123$')

login('sumit','abc123')

current_balance = 0  # Define current balance , to avoid any reset when you try to re-run function
def transaction(type,amount):
  global current_balance   # global keyword allows to call variable which you declared outside the function , inside the module
  if type == 'withdrawal' and current_balance-amount > -1000:  #  validate type of transaction AND post deduction balance must be > -1000
    current_balance = current_balance - amount  # deduct request amount , if compound condition is TRUE
    print('current balance is: ',current_balance)
  else:
    print('Insufficient balance OR wrong type of operation selected')

transaction('withdrawal',500)

transaction('withdrawal',500)

transaction('withdrawal',500)

print(current_balance)

def demo():  # Function definition
  print('I am in Demo function')
  def sample(): # Function definition
    print('I am in sample function')
  sample() # call to function
  print('Hello')

demo() # call to function

sample()

a = [1,2,3,4,5]

help(a.count)

"""https://pythontutor.com/visualize.html#mode=display

5-June-2023 classnotes
"""

# Function definition with any default value
def addition(num1=0,num2=0,num3=0,num4=0):
  print(num1+num2)

# call function with all 4 values
addition(4,5,10,11)

# call function with all 3 values , and 4th value will be default value
addition(4,5,10)

# call function without any user defined value , it will use all default values
addition()

# Function definition with any default value
def multiply(num1=1,num2=1,num3=1,num4=1):
  print(num1*num2*num3*num4)

multiply()

# Function definition with any default value
def multiply(num1,num2,num3=1,num4=1):
  print(num1*num2*num3*num4)

def dynamic_addition(numbers):
  a = 0
  for num in numbers:
   a = a+num
  return a

dynamic_addition([10,20,30,5,20])

"""Dynamic number of args"""

def add(*args):
  return sum(args)

add(10,20,30,40,50,65,70)

add(10,12,13)

add()

def test(**kwargs):
  return kwargs

test(a=1,b=2)

test(a=1,b=2,c=3,d=4)

test()

def sample(*args,**kwargs):
  print('hello')

sample(10,20,a=30)

sample(10,d=30,500)

def sample(*args,**kwargs):
  print(args)
  print(kwargs)

sample(10,20,30,a=100,b=200)

def sample(*args,**kwargs):
  return args , kwargs

sample(10,20,30,a=100,b=200)

def transaction(*args,**kwargs):
  if kwargs['id']=='admin' and kwargs['password']=='test123$':
    print('your transaction amount is ', sum(args))
  else:
    print('Invalid credentials')

transaction(10,20,30,id='admin',password='test123$')

transaction(10,200,id='admin',password='abc$')

def review(*args):  # Write a function in python to display total price of products
  print('Total amount is' , sum(args))

review(10,20,30,40,50,60,800,30,10)

def detailed_review(**kwargs):  # Write a function in python to display product name and price
  for product,price in kwargs.items():
    print('Product name is: ',product , ' and price: ',price)

detailed_review(Laptop=300,Keyboard=20, mouse=5)

"""6-June-2023 Assignment solution

Assignment-DataTypes_Ifelse-loop-02

4) Write a program in python to accept five numbers as input and display the number which is the second highest value in given input.
"""

a = [1,10,11,12,5]
a.sort()
print(a[-2])

"""5) Write a program in python to pick numbers between range 10 to 20 and display squares of even numbers and cubes of odd numbers.


"""

a= range(10,21)
for e in a:
  if e%2==0:
    print(e**2)
  else:
    print(e**3)

"""8)"""

for i in range(1,6):
  if i <=3:
    print('Hi' * i)
  else:
    print('Bye' * i)

"""9)"""

for i in (1,2,3,4,5):
  if i %2 == 1:
    print('Hi'*i)
  else:
    print('Bye'*i)

"""10)"""

for i in range(1,7):
  print((str(i)+' ')*i)

for i in range(1,7):
    j=str(i)+' '
    print(j*i)

"""11)"""

for i in [6,5,4,3]:
  print(str(i) * 5)

"""Assignment-03 solution   https://colab.research.google.com/drive/1lxhfj78-6nq3X80iUxc8e6gN6bffWVHr?usp=sharing

Assignment-04 , need to solve this today : https://docs.google.com/document/d/1mm5e7f_Chooxcch5PhFx6auT4F-iai5yyPPne6ftpAc/edit

Assignment-05, https://colab.research.google.com/drive/1QL4OZZTOdktbabx73rpcXUTlVb6GDvTE?usp=sharing
"""

a = 10
a = a+ 20
print(a)

a = 10
a += 20
print(a)

a = 'India'

help(a.capitalize)

"""7-June-2023 (Object Oriented Programming Concepts)

# Object Oriented Programming

* Objects
* Using the *class* keyword
* Creating class attributes
* Creating methods in a class
* Learning about Inheritance
* Learning about Polymorphism
* Learning about Special Methods for classes
"""

a = 10
b = 20.5
c = [1,2,3,4,5]

print(c)

type(c)

print(type(c))

class Account: # Class definition , class name is Account
  id = None    # first attribute , this attribute will captrue id of account holder
  name = None  # second  attribute , this attribute will captrue name of account holder
  city  = None # third  attribute , this attribute will captrue city of account holder

obj = Account() # create first object named obj
xyz = Account() # create second object named xyz

obj.id = 1  # called class level attribute named id using obj object and assigned value
obj.name = 'Amit' # called class level attribute named name using obj object and assigned value

print(obj.id)

print(obj.city)

id = 1
id = 10
print(id)

class student:
  id = None
  name = None
  city = None
  age = 0

s1 = student()
s2 = student()
s3= student()

s1.id = 1
s2.id = 2

print(s1.id)

print(s2.id)

class Employee:
  id = None
  name = None
  salary = None
  def incentive(self):
    return self.salary * 1.05

e = Employee()
e.salary = 3000

e.incentive()

"""Please make sure that you have telegram channel app installed in your phone

Telegram link (batch specific group) : https://t.me/+CbzcQfVIsi8yZTI1

Placement channel link : https://t.me/technogeekssolutions

8-June-2023 classnotes
"""

class customer: # define a class named customer
  id1 = None
  name1 = None
  age1 = None
  city1 = None

c1 = customer()
c2 = customer()
c3 = customer()

type(c1)

c1.id1 = 1
c2.id1 = 2

id1 = 100
print(id1)

class customer: # define a class named customer
  id1 = None
  name1 = None
  age1 = None
  city1 = None
  test = None
  def printall(self):
    print({'id': self.id1,'name':self.name1,'test': self.test , 'age':self.age1,'city':self.city1})

obj = customer()
obj.id1 = 1
obj.city1 = 'Pune'
obj.name1 = 'Amit'
obj.age1 = 25
obj.test = 100

print(obj.id1, obj.city1 , obj.name1)

obj.printall()

obj1 = customer()
obj1.age1 = 1
obj1.printall()

a = [1,2,3,4]

print(type(a))

customer.id1 = 100  # if you update any attribute value directly at class level , it directly change the default value

print(customer.id1)

x = customer()
print(x.id1)

vars(x)

vars(obj1)

vars(obj) # in-built function which allows to display all attributes values , assosiated to object

obj.printall() # UDF which allows to display all attributes values , assosiated to object

help(vars)

print("python'123")

print('python'123')

print(python'123)

a = [1,2,3,4,5,1,1]

set(a)

s = {1,2,3,4,5}

list(s)

"""9-June-2023 Classnotes"""

class A:
  x = 10
  def test(self):
    for i in [1,2,3]:
      print(i)
      print(self.x)

obj = A()

obj.test()

"""# Object Oriented Programming

* Objects
* Using the *class* keyword
* Creating class attributes
* Creating methods in a class
* Learning about Inheritance
* Learning about Polymorphism
* Learning about Special Methods for classes
"""

class A:
  x = 100
class B(A) :
  y = 50

a = A()
b = B()

b.x

b.y

class ManualCar :
  wheel = 4
  tank_capacity = 30

class SelfModeCar(ManualCar):
  pass

class BaseModel : # Define all common features
  wheel = 4

class ElectricCar(BaseModel) :
  max_battery_capacity = 30
  current_battery_level = 0
  def check_battery_level(self): # this function can display current battery level at any time
    print('Current batter level is :',self.current_battery_level)
  def recharge(self): # This function can be used to display current batter level based on two categories at the time of charging
    if self.current_battery_level < self.max_battery_capacity:
      print('Charging')
    elif self.current_battery_level == self.max_battery_capacity:
      print('Full charged')

class PetrolCar(BaseModel):
  max_tank_capacity = 35

obj = ElectricCar()

obj.check_battery_level()

obj.recharge()

obj.recharge()

"""OOP Assignment-01 https://colab.research.google.com/drive/1ZojGaaYjr6pCShF3bdTXqBPSctjeJKVv?usp=sharing

OOP Assignment-02 https://colab.research.google.com/drive/1dg9V-8Z5r7L66gw4dtyJqQtuZucdzA0-?usp=sharing
"""

class Account:
  owner = None
  balance = None
  def __init__(self,owner_name,balance_value):  # special method , which can be called automatically at the time of object creation
    self.owner = owner_name
    self.balance = balance_value

pooja = Account('Pooja',500)

pooja.balance

"""13-June-2023 (Assignment solution)

Problem statement :Write a program in python to check whether a number is palindrome or not ?
Example - 121 , 232,111, 151 (check only three digits numbers)
"""

nums =121
if nums >99 and nums <1000:
  if int(nums/100) == nums%10:
    print('Number is palindrome')
  else:
    print('Number is not palindrome')
else:
  print('3 digit nums only')

num = 121
int(num/100)

num%10

def test(nums):
  if nums >99 and nums <1000:
    if int(nums/100) == nums%10:
      print('Number is palindrome')
    else:
      print('Number is not palindrome')
  else:
    print('3 digit nums only')

test(121)

test(122)

"""Problem statement - Write a program in python to check the number of characters in a string, if the number of characters are even then display reverse of that string , if number of character are odd then display alternate characters

"""

s = 'RAM'
if len(s)%2 ==0:  # Check number of characters are even ?
  print(s[::-1])   #  select characters from right to left
else:
  print(s[::2])   # select the alternate characters

"""Pending assignments
Assignment-05, https://colab.research.google.com/drive/1QL4OZZTOdktbabx73rpcXUTlVb6GDvTE?usp=sharing

OOP Assignment-06 https://colab.research.google.com/drive/1ZojGaaYjr6pCShF3bdTXqBPSctjeJKVv?usp=sharing
OOP Assignment-07 https://colab.research.google.com/drive/1dg9V-8Z5r7L66gw4dtyJqQtuZucdzA0-?usp=sharing

Anaconda setup download link : https://www.anaconda.com/download

Assignment-05 solutuon : https://colab.research.google.com/drive/1pvchHZqOUc8c-ErsfxB-hReW8NTYSlSM?usp=sharing

14-June-2023 classnotes (OOP)
"""

class Demo: # class named Demo
  a = 10  # attribute
  def test(self): # class level method , self keyword allowed us to call class level method , with the help of object
    a = 100
    print('Hello I am in test method', self.a + a)

d = Demo()

d.a  # call class' attribute with the help of object

d.test()  # Display class' method output with the help of object

class Test:
  a = 0 # attribute
  b = 10 # attribute
  def __init__(self,x,y):
    self.a = x
    self.b = y
    print(self.a+self.b)

t1 = Test(10,20)

class Test1:
  def abc(self,a,b):
    self.a=a
    self.b=b
    print(self.a+self.b)
  def xyz(self):
    print(self.a+self.b)

t2 = Test1()

t2.xyz()

t2.b

vars(t2)

class Demo1: # This class has multiple __init__ methods, and last copy of init is latest and final copy
  def __init__(self):
    print('Hi')
  def __init__(self):
    print('bye')
  def __init__(self):
    print('Hello')
  def test(self):
    print(123)
  def test(self):
    print(456)

d = Demo1()

d.test()

class A:
  x = 10
class B(A):
  pass

t1 = B()

t1.y

def abc():
  print('I am in abc function')
class Demo:
  def xyz(self):
    print('I am in xyz function')

d = Demo()

d.xyz()

d.abc()

"""Pycharm download link : https://www.jetbrains.com/pycharm/download/ , please download and install Community edition

Assignment discussion (14-June-2023)

____
**Hard**:

Write a Python function to check whether a string is pangram or not.

    Note : Pangrams are words or sentences containing every letter of the alphabet at least once.
    For example : "The quick brown fox jumps over the lazy dog"

Hint: Look at the string module
"""

import string

def ispangram(str1):
    alphabet=string.ascii_lowercase
    x = set(alphabet)
    return x <= set(str1.lower())

ispangram("The quick brown fox jumps over the lazy dog")

ispangram('Hello')

ispangram('ABCDEFGHIJKLMNOPQRSTUVWZYX')

"""15-June-2023 (OOP)

MRO (Method Resolution Order)
"""

class A:
  x = 10
class B:
  x = 20
class C:
  x = 30
class D:
  x = 40
class E(A,B,C,D):
  x = 90

obj = E()
print(obj.x)

class A:
  x = 5
class B(A): # B is child class and A is parent class
  pass
class C(B): # C is child class and B is parent class
 pass
obj = C()
print(obj.x)

class A:
  x = 10
class B :
  x = 20
class C:
  x = 30
class D:
  x = 40
class E:
  pass

obj = E()
print(obj.x)

# We can define a child class as parent of its own parent
class B1:
  x = 200
class A1(B1):
  x = 100

class A:
  x = 1
class B:
  y = 2
  def test(self):
    print('Hi')
class D(A,B):  # A clss can inhetir more than one classes
  z = 50

obj = D()

obj.test() # Child class can inherit methods as well as attributes

class A:
  x = 10
  def test(self):
    return 'I am in test method inside class named A'
class B(A) :
  pass

obj = B()
print(obj.x)
print(obj.test())

class Employee:
  id = 1
  def __init__(self):
    print('Welcome to company')
  def __del__(self):     #  del special method , allows us to perform activity when we delete object with the help of del keyword
    print('I revoked all your access')

e1 = Employee()

e1.id

del e1 # del keyword allows us to delete object

e1.id

class Account:
  id = None
  name = None
  balance = None
  def __init__(self,id,name,balance):
    self.id = id
    self.name = name
    self.balance = balance
  def check_balance(self):
    return self.balance
  def __del__(self):
    print('Account disabled with current balance',self.balance)

a1 = Account(1,'Amit',2000)

a1.name

a1.check_balance()

del a1

del a1

"""16-June-2023 (Class notes) , Polymorphism"""

class Circle:
  def __init__(self,radius):
    self.radius = radius
  def calculate_area(self):
    return 3.14 * self.radius * self.radius

class Square:
  def __init__(self,dim):
    self.dim = dim
  def calculate_area(self):
    return self.dim * self.dim

c = Circle(5)
s = Square(5)

c.calculate_area()

s.calculate_area()

"""Pending assignments Assignment-05, https://colab.research.google.com/drive/1QL4OZZTOdktbabx73rpcXUTlVb6GDvTE?usp=sharing

OOP Assignment-06 https://colab.research.google.com/drive/1ZojGaaYjr6pCShF3bdTXqBPSctjeJKVv?usp=sharing

OOP  Assignment-07 https://colab.research.google.com/drive/1dg9V-8Z5r7L66gw4dtyJqQtuZucdzA0-?usp=sharing

20-June-2023 exception Handling

Code without Exception Handling
"""

age = int(input('Enter your age: '))

"""Code with Exception Handling"""

try: # allows to execute business logic
    age = int(input('Enter your age: '))
except:  # except can take care of any exception , if occures in try block
    print('Invalid input')

a = int(input('Enter your first number: '))
b = int(input('Enter your second number: '))
print(a+b)

try:
  a = int(input('Enter your first number: '))
  b = int(input('Enter your second number: '))
  print(a+b)
except:
  print('There is some error')

"""Error in code"""

try:
  a = int(input('Enter your first number: ')
  b = int(input('Enter your second number: '))
  print(a+b)
except:
  print('There is some error')

try:
  a = int(input('Enter a number:'))
  print(a)
except:
  print("Hi")

try:
  name = input("Enter your user name: ")
  age = int(input("Enter your age: "))
except:
  print('There is some error')

name = input("Enter your user name: ")
age = int(input("Enter your age: "))

attempt_count = 0
username = 'admin'  # stored username in system
otp = 5565 # stored password in system
while True:
  try:
    attempt_count = attempt_count+1
    user_name = input('Enter your yourname please: ') # username which user will supply at run time for validation and authentication
    password = int(input('Enter your password: '))  # password which user will supply at run time for validation and authentication
    if user_name == username and password == otp and attempt_count <4:
      print('Login successful')
      break
    elif attempt_count >=4:
      print('Number of attempts exceeded, Please contact customer care to unblock account')
      break
    else:
      print('login failed because of wrong credentials')

  except:
    if attempt_count >=4:
      print('Number of attempts exceeded, Please contact customer care to unblock account')
      break
    else:
      print('Something went wrong')

"""21-June-2023"""

try:
  print('Hi')
  a = 1 + 'hi'
  print(a)
except:
  print('Bye')

try:
  print('hi')
  a = 1 + 'hi'
except:
  print('bye')
finally :
  print('I am in finally block')

try:
  print('hi')
except:
  print('bye')
finally :
  print('I am in finally block')

try:
  print('hi')
  a = 1 + 'hi'
except:
  print('bye')
  a = 1 + 'hi'

