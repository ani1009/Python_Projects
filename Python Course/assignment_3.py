# -*- coding: utf-8 -*-
"""Assignment_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y0ZTJdXgoY_1u0YHdgL9GTqPENqeecvu

1 . Write a function that returns the lesser of two given numbers if both numbers are even, but returns the greater if one or both numbers are odd
"""

def lesser_of_two_events(a,b):
  if a%2 == 0 and b%2 == 0:
    return min(a,b)
  else:
    return max(a,b)
#lesser_of_two_events(3,6)
#lesser_of_two_events(2,6)
lesser_of_two_events(5,8)

"""2 . ANIMAL CRACKERS: Write a function takes a two-word string and returns True if both words begin with same letter"""

def animal_crackers(text):
  wordlist = text.split()
  return wordlist[0][0] == wordlist[1][0]

#animal_crackers("Levelheaded Llama")
#animal_crackers("Crazy Kangaroo")
animal_crackers("Crazy Chicken")

"""3 . MAKES TWENTY: Given two integers, return True if the sum of the integers is 20 or if one of the integers is 20. If not, return False"""

def makes_twenty(num1,num2):
  #return (num1+num2)==20 or num1==20 or num2==20
  if(num1+num2)== 20 or num1 ==20 or num2 == 20:
    return True
  else:
    return False

#makes_twenty(20,10)
#makes_twenty(13,7)
makes_twenty(10,6)
#makes_twenty(5,20)

"""Level_1_
4 .OLD MACDONALD: Write a function that capitalizes the first and fourth letters of a **name**
"""

def old_macdonald(name):
    if len(name) > 3:
        return name[0:3].capitalize() + name[3:].capitalize()
    else:
        return 'Name is too short!'

old_macdonald('macdonald')
old_macdonald('macd')
#old_macdonald('md')

"""5 . MASTER YODA: Given a sentence, return a sentence with the words reversed"""

def master_yoda(text):
  return " ".join(text.split()[::-1])

master_yoda("I am Home")
master_yoda("We are Happy")

"""6 . ALMOST THERE: Given an integer n, return True if n is within 10 of either 100 or 200"""

def almost_there(n):
    return ((abs(100 - n) <= 10) or (abs(200 - n) <= 10))

#almost_there(149)
#almost_there(90)
almost_there(220)

"""7 . FIND 33:
Given a list of ints, return True if the array contains a 3 next to a 3 somewhere.
"""

def has_33(nums):
  for i in range(0,len(nums)-1):
    if nums[i:i+2] == [3,3]:
      return True
  else:
      return False

has_33([1,3,3])

"""8 . PAPER DOLL: Given a string, return a string where for every character in the original there are three characters"""

def paper_doll(text):
  result =' '
  for char in text:
    result += char * 3
  print (result)
  #return result

#paper_doll('Hello')
paper_doll('Missisippi')

"""11 . BLACKJACK: Given three integers between 1 and 11, if their sum is less than or equal to 21, return their sum. If their sum exceeds 21 and there's an eleven, reduce the total sum by 10. Finally, if the sum (even after adjustment) exceeds 21, return 'BUST'"""

def blackjack(a,b,c):
    if sum((a,b,c)) <= 21:
      return sum((a,b,c))

    elif sum((a,b,c)) <= 31 and 11 in (a,b,c):
      return sum((a,b,c)) - 10
    else:
      return 'BUST'

#blackjack(7,8,9)
#blackjack(1,2,3)
blackjack(5,6,11)

"""12 . SUMMER OF '69: Return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 9 (every 6 will be followed by at least one 9). Return 0 for no numbers."""

def summer_69(arr):
  sum = 0
  flag = True
  for num in arr:
    while flag:
      if num != 6:
        sum = sum + num
        break
      else:
        flag = False
      while not flag:
        if num != 9:
          break
        else:
          flag = True
          break
  return sum

summer_69([4, 5, 6, 7, 8, 9])

"""13. SPY GAME: Write a function that takes in a list of integers and returns True if it contains 007 in order"""

def spy_game(nums):
  code = [0,0,7,'x']
  for num in nums:
    if num == code[0]:
      code.remove(num)

  if len(code) == 1:
    return True
  else:
    return False

#spy_game([1,2,4,0,0,7,5])

spy_game([1,7,2,0,4,5,0])

"""14. COUNT PRIMES: Write a function that returns the number of prime numbers that exist up to and including a given number"""

def count_primes(num):
    primes = [2]
    x = 3
    if num < 2:
        return 0
    while x <= num:
        for y in primes:
            if x%y == 0:
                x += 2
                break
        else:
            primes.append(x)
            x += 2
    print(primes)
    return len(primes)

#count_primes(100)
count_primes(50)

"""15. PRINT BIG: Write a function that takes in a single letter, and returns a 5x5 representation of that letter"""

def print_big(letter):
    patterns = {1:'  *  ',2:' * * ',3:'*   *',4:'*****',5:'**** ',6:'   * ',7:' *   ',8:'*   * ',9:'*    '}
    alphabet = {'A':[1,2,4,3,3],'B':[5,3,5,3,5],'C':[4,9,9,9,4],'D':[5,3,3,3,5],'E':[4,9,4,9,4]}
    for a in alphabet[letter.upper()]:
        print(patterns[a])

print_big('b')